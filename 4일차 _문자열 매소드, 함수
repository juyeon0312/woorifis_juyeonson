1. 문자열 메소드
- 문자열 객체에 대해 다양한 작업을 수행할 수 있게 하는 내장 함수들
- 문자열을 조작하고, 정보를 추출하며, 특정 패턴을 처리하는 데 유용
- [파이썬 공식 문자열 레퍼런스](https://docs.python.org/ko/3/library/stdtypes.html#text-sequence-type-str)

- 자주 사용되는 문자열 메소드(수업에서 다룬 내용)

  - split()
  - replace()
  - strip()
  - join()
  - find()
  - format()

1-1. capitalize()
- 첫 문자를 대문자로 변환하고 나머지 문자는 소문자로 변환합니다.
- 사용 예시 
text = "hello world"
print(text.capitalize())  # 출력: Hello world

1-2. lower()
- 문자열의 모든 문자를 소문자로 변환합니다.
- 사용 예시 
text = "HELLO WORLD"
print(text.lower())  # 출력: hello world

1-3.upper()
- 문자열의 모든 문자를 대문자로 변환합니다.
- 사용 예시 
text = "hello world"
print(text.upper())  # 출력: HELLO WORLD

1-4.title()
- 각 단어의 첫 문자를 대문자로 변환합니다.
- 사용 예시 
text = "hello world"
print(text.title())  # 출력: Hello World

1-5.strip(), lstrip(), rstrip()
  - strip
      -문자열의 앞, 뒤에 존재하는 화이트 스페이스를 전부 제거
      -문자열의 마지막에 뉴라인의 존재 여부
      -불필요한 문자들은 전부 제거 할 수 있다.
      -문자열 중간에 있는 화이트 스페이스는 제거되지 않습니다
      -메소드의 원형
    -str.strip([chars])
    -문자열의 양쪽, 왼쪽, 또는 오른쪽의 공백을 제거합니다.
    - 사용 예시
    text = "   hello world   "
    print(text.strip())   # 출력: hello world
    print(text.lstrip())  # 출력: hello world   
    print(text.rstrip())  # 출력:    hello world

1-6.split(), rsplit(), splitlines()
- 문자열을 구분자로 나누어 리스트로 반환합니다.
- 사용 예시
text = "apple, banana, cherry"
print(text.split(", "))  # 출력: ['apple', 'banana', 'cherry']

text = "apple banana cherry"
print(text.rsplit(" ", 1))  # 출력: ['apple banana', 'cherry']

text = "hello\nworld"
print(text.splitlines())  # 출력: ['hello', 'world']

1-7.join()
- 리스트의 요소를 문자열로 결합합니다.
-사용예시
words = ["hello", "world"]
print(" ".join(words))  # 출력: hello world

1-8.replace()
- 문자열의 일부를 다른 문자열로 대체합니다.
-str.replace(old, new[, count])
- 사용예시
text = "hello world"
print(text.replace("world", "there"))  # 출력: hello there
 
1-9.find(), rfind(), index(), rindex()
- 문자열 내에서 부분 문자열을 찾고, 그 위치를
 반환합니다. find()는 없으면 -1을 반환하고, index()는 없으면 예외를 발생시킵니다.
-str.find('찾을 문자', 시작인덱스, 끝인덱스)
- 사용예시
text = "hello world"
print(text.find("world"))   # 출력: 6
print(text.rfind("o"))      # 출력: 7

print(text.index("world"))  # 출력: 6
print(text.rindex("o"))     # 출력: 7

1-10.startswith(), endswith()
- 문자열이 특정 접두사 또는 접미사로 시작하거나 끝나는지 확인합니다.
- 사용 예시
text = "hello world"
print(text.startswith("hello"))  # 출력: True
print(text.endswith("world"))    # 출력: True

1-11.count()
- 문자열 내에서 부분 문자열이 나타나는 횟수를 셉니다.
- 사용 예시
text = "hello world"
print(text.count("o"))  # 출력: 2

1-12.format(), f-string
- 문자열 내에서 변수를 삽입합니다.
- format()
문자열을 추가하거나 형식화하는데 사용하는 메소드입니다.
파이썬3.1부터는 변수명/인덱스명을 생략 가능합니다
- fstring
문자열 앞에 f를 붙여주면 됩니다
파이썬 3.6부터 사용 가능
가장 최신 문법, 가장 간결하고 직관적인 표현법

- 사용 예시
# format() 사용
name = "Alice"
age = 30
print("My name is {} and I am {} years old.".format(name, age))  # 출력: My name is Alice and I am 30 years old.

# f-string 사용
print(f"My name is {name} and I am {age} years old.")  # 출력: My name is Alice and I am 30 years old.


- 정규식(Regular Expression)
  "특정 조건 또는 패턴"을 치환하는 과정을 쉽게 처리할 수 있는 방법
  match() : 문자열의 첫 시작부터 정규식과 매치되는지 조사한다.
search() : 문자열 전체를 검색하여 정규식과 매치되는지 조사한다.
findall() : 정규식과 매치되는 모든 문자열(substring)을 리스트로 돌려준다.
finditer() : 정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 돌려준다. https://docs.python.org/ko/3/library/re.html?highlight=re#module-re

# match() : 문자열의 첫 시작부터 정규식과 매치되는지 조사한다.
# search() : 문자열 전체를 검색하여 정규식과 매치되는지 조사한다.
# findall() : 정규식과 매치되는 모든 문자열(substring)을 리스트로 돌려준다.
# finditer() : 정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 돌려준다.

사용하기 위해서는 모듈 설치 필요(import re)


### [문자 클래스]

1. [abc] - a, b, c중 한 개의 문자와 매치
  - a : 매치여부 OK
  - apple : ok
  - double : no
2. \d   : 숫자와 매치, [0-9]와 동일
3. \D : 숫자가 아닌 것과 매치 [^0-9]와 동일
4. \s : whitespace 문자와 매치
5. \S : whitespace 문자가 아닌것과 매치,
6. \w : 문자 + 숫자와 매치, [a-zA-Z0-9]와 동일
7. \W : 문자+숫자가 아닌 문자와 매치. [^a-zA-Z0-9]와 동일
8. a.b : a와 b 사이에 줄바꿈 문자를 제외한 모든 문자 허용
9. a[.]b : a와 b 사이에 dot 문자만 허용
10. ca*t  : a 문자가 0번 이상 반복 허용
11. ca+t :  a 문자가 1번 이상 반복 허용
12. ca?t : a 문자가 없거나, 1번만 허용
13. ca{3}t : a 문자가 3번 반복되면 매치
14. ca{2, 3}t : a 문자가 2~3번 반복되면 매치


2. 함수(finction)
- 수학적 의미의 함수 : 집합과 집합 사이의 관계를 표현
- 프로그래밍 언어에서는 프로그램을 이루는 기본 단위
- 수학적 의미의 함수의 개념을 차용한 형태입니다.
-함수는
   -똑같은 코드를 또 치고 싶지 않아서... (중복되는 명령어들을 줄일 수 있기 때문에 효율적 프로그래밍이 가능합니다)
  -여러 명령어를 집합시켜 놓습니다.
- 함수 사용 방법
def 함수이름(매개변수1, 매개변수2, ...):
    # 함수 본문
    return 반환값


 - 4가지 종류가 있음
      2-1. 입풋가 있고 출구가 있는 함수
      2-2. 인풋이 있고결과만 보여줌(예시:print)
      2-3. 인풋도 결과도 없는 경우
      2-4. 인풋은 없고 결과가 있는 경우

3-1. 비파괴적인 함수, 파괴적인 힘수-undestructive function, destructive function

3-1-1. 비파괴적인 함수(undestructive function)
비파괴적인 함수는 원래의 데이터 구조를 변경하지 않고, 새로운 데이터 구조를 반환하는 함수입니다. 원본 데이터를 변경하지 않고 새로운 값을 생성하기 때문에 함수 호출 후에도 원본 데이터는 그대로 유지됩니다.

예시1)리스트의 비파괴적인 함수
 # sorted() 함수는 원본 리스트를 변경하지 않고 정렬된 새 리스트를 반환합니다.
numbers = [3, 1, 4, 1, 5]
sorted_numbers = sorted(numbers)

print("원본 리스트:", numbers)            # 출력: 원본 리스트: [3, 1, 4, 1, 5]
print("정렬된 리스트:", sorted_numbers)    # 출력: 정렬된 리스트: [1, 1, 3, 4, 5]

예시2)문자열의 비파괴적인 함수
# upper() 함수는 원본 문자열을 변경하지 않고 대문자로 변환된 새 문자열을 반환합니다.
text = "hello"
upper_text = text.upper()

print("원본 문자열:", text)         # 출력: 원본 문자열: hello
print("대문자 문자열:", upper_text)  # 출력: 대문자 문자열: HELLO


3-1-2.파괴적인 함수(destructive function)
파괴적인 함수는 원래의 데이터 구조를 직접 변경하는 함수입니다. 함수 호출 후 원본 데이터가 변경되기 때문에 이전 상태로 돌아갈 수 없습니다.

예시1)리스트의 파괴적인 함수
# sort() 함수는 원본 리스트를 직접 정렬하여 변경합니다.
numbers = [3, 1, 4, 1, 5]
numbers.sort()

print("정렬된 리스트:", numbers)  # 출력: 정렬된 리스트: [1, 1, 3, 4, 5]

예시2)리스트의 append() 함수
# append() 함수는 원본 리스트에 새로운 요소를 추가하여 변경합니다.
numbers = [3, 1, 4]
numbers.append(1)

print("원본 리스트:", numbers)  # 출력: 원본 리스트: [3, 1, 4, 1]

3-1-3. 요약
요약
비파괴적인 함수는 원본 데이터를 변경하지 않고 새로운 데이터를 반환하는 함수입니다.
예: sorted(), upper()
파괴적인 함수는 원본 데이터를 직접 변경하는 함수입니다.
예: sort(), append()
이 두 가지 개념은 데이터를 다룰 때 매우 중요하며, 함수의 동작 방식을 이해하고 적절히 사용해야 데이터의 무결성을 유지하고 원하는 결과를 얻을 수 있습니다.
